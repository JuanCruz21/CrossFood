"""Initial migration with all models

Revision ID: eb14b17e4da9
Revises: 
Create Date: 2025-10-27 22:23:25.272682

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
import uuid

# revision identifiers, used by Alembic.
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'eb14b17e4da9'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Companies',
    sa.Column('legal_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('tax_id', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('fiscal_address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('postal_code', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_Companies_tax_id'), 'Companies', ['tax_id'], unique=True)
    op.create_table('Roles',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('TaxRates',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('rate', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Restaurants',
    sa.Column('company_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('phone_number', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['Companies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Categories',
    sa.Column('restaurant_id', sa.Uuid(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('parent_category_id', sa.Uuid(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['parent_category_id'], ['Categories.id'], ),
    sa.ForeignKeyConstraint(['restaurant_id'], ['Restaurants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('RestaurantTables',
    sa.Column('restaurant_id', sa.Uuid(), nullable=True),
    sa.Column('table_number', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=False),
    sa.Column('qr_code_identifier', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['restaurant_id'], ['Restaurants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('UserRoles',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('role_id', sa.Uuid(), nullable=False),
    sa.Column('restaurant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['restaurant_id'], ['Restaurants.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['Roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id', 'restaurant_id')
    )
    op.create_table('Orders',
    sa.Column('restaurant_table_id', sa.Uuid(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['restaurant_table_id'], ['RestaurantTables.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Products',
    sa.Column('category_id', sa.Uuid(), nullable=False),
    sa.Column('tax_rate_id', sa.Uuid(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('is_available', sa.Boolean(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['Categories.id'], ),
    sa.ForeignKeyConstraint(['tax_rate_id'], ['TaxRates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('OrderItems',
    sa.Column('order_id', sa.Uuid(), nullable=False),
    sa.Column('product_id', sa.Uuid(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['Orders.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['Products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Payments',
    sa.Column('order_id', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('payment_method', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('transaction_id', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('payment_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['Orders.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Invoices',
    sa.Column('company_id', sa.Uuid(), nullable=False),
    sa.Column('payment_id', sa.Uuid(), nullable=True),
    sa.Column('invoice_series', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('invoice_number', sa.Integer(), nullable=False),
    sa.Column('issue_date', sa.Date(), nullable=False),
    sa.Column('operation_date', sa.Date(), nullable=False),
    sa.Column('invoice_type', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('customer_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('customer_tax_id', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('customer_address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('customer_city', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('customer_postal_code', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True),
    sa.Column('customer_country', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('total_base_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('total_tax_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('total_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('verifactu_hash', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('qr_code_data', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['Companies.id'], ),
    sa.ForeignKeyConstraint(['payment_id'], ['Payments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_invoice_series_number', 'Invoices', ['invoice_series', 'invoice_number'], unique=True)
    op.create_table('InvoiceCorrections',
    sa.Column('original_invoice_id', sa.Uuid(), nullable=False),
    sa.Column('corrective_invoice_id', sa.Uuid(), nullable=False),
    sa.Column('correction_reason_code', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True),
    sa.Column('correction_type', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('reason_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('corrected_base_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('corrected_tax_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['corrective_invoice_id'], ['Invoices.id'], ),
    sa.ForeignKeyConstraint(['original_invoice_id'], ['Invoices.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('corrective_invoice_id')
    )
    op.create_table('InvoiceItems',
    sa.Column('invoice_id', sa.Uuid(), nullable=False),
    sa.Column('product_description', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price_base', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('discount_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('tax_rate_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('tax_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total_line_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['invoice_id'], ['Invoices.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('item')
    op.drop_index(op.f('ix_course_category_id'), table_name='course')
    op.drop_index(op.f('ix_course_is_active'), table_name='course')
    op.drop_index(op.f('ix_course_is_public'), table_name='course')
    op.drop_index(op.f('ix_course_owner_id'), table_name='course')
    op.drop_index(op.f('ix_course_title'), table_name='course')
    op.drop_table('course')
    op.drop_index(op.f('ix_category_is_active'), table_name='category')
    op.drop_index(op.f('ix_category_name'), table_name='category')
    op.drop_table('category')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('category',
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=1024), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='category_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_category_name'), 'category', ['name'], unique=True)
    op.create_index(op.f('ix_category_is_active'), 'category', ['is_active'], unique=False)
    op.create_table('course',
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=1024), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['category.id'], name=op.f('course_category_id_fkey')),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name=op.f('course_owner_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('course_pkey'))
    )
    op.create_index(op.f('ix_course_title'), 'course', ['title'], unique=True)
    op.create_index(op.f('ix_course_owner_id'), 'course', ['owner_id'], unique=False)
    op.create_index(op.f('ix_course_is_public'), 'course', ['is_public'], unique=False)
    op.create_index(op.f('ix_course_is_active'), 'course', ['is_active'], unique=False)
    op.create_index(op.f('ix_course_category_id'), 'course', ['category_id'], unique=False)
    op.create_table('item',
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name=op.f('item_owner_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('item_pkey'))
    )
    op.drop_table('InvoiceItems')
    op.drop_table('InvoiceCorrections')
    op.drop_index('idx_invoice_series_number', table_name='Invoices')
    op.drop_table('Invoices')
    op.drop_table('Payments')
    op.drop_table('OrderItems')
    op.drop_table('Products')
    op.drop_table('Orders')
    op.drop_table('UserRoles')
    op.drop_table('RestaurantTables')
    op.drop_table('Categories')
    op.drop_table('Restaurants')
    op.drop_table('TaxRates')
    op.drop_table('Roles')
    op.drop_index(op.f('ix_Companies_tax_id'), table_name='Companies')
    op.drop_table('Companies')
    # ### end Alembic commands ###
